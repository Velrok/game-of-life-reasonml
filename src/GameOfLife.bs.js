// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function world_cord_to_index(param, param$1) {
  return Caml_int32.imul(param$1[/* y */1], param[/* height */1]) + param$1[/* x */0] | 0;
}

function neighbors(param, param$1) {
  var y = param$1[/* y */1];
  var x = param$1[/* x */0];
  var height = param[/* height */1];
  var width = param[/* width */0];
  var di = /* :: */[
    -1,
    /* :: */[
      0,
      /* :: */[
        1,
        /* [] */0
      ]
    ]
  ];
  return List.map((function (param) {
                return /* record */[
                        /* x */param[0],
                        /* y */param[1]
                      ];
              }), List.filter((function (param) {
                      var y = param[1];
                      var x = param[0];
                      if (x >= 0 && y >= 0 && x < width) {
                        return y < height;
                      } else {
                        return false;
                      }
                    }))(List.map((function (param) {
                        return /* tuple */[
                                param[0] + x | 0,
                                param[1] + y | 0
                              ];
                      }), List.filter((function (c) {
                              return Caml_obj.caml_notequal(c, /* tuple */[
                                          0,
                                          0
                                        ]);
                            }))(List.flatten(List.map((function (i) {
                                    return List.map((function (ii) {
                                                  return /* tuple */[
                                                          i,
                                                          ii
                                                        ];
                                                }), di);
                                  }), di))))));
}

function mk_world(w, h) {
  return /* record */[
          /* width */w,
          /* height */h,
          /* data */Caml_array.caml_make_vect(Caml_int32.imul(w, h), /* Dead */0)
        ];
}

function mk_bar_world(param) {
  return /* record */[
          /* width */5,
          /* height */5,
          /* data : array */[
            /* Dead */0,
            /* Dead */0,
            /* Dead */0,
            /* Dead */0,
            /* Dead */0,
            /* Dead */0,
            /* Dead */0,
            /* Alive */1,
            /* Dead */0,
            /* Dead */0,
            /* Dead */0,
            /* Dead */0,
            /* Alive */1,
            /* Dead */0,
            /* Dead */0,
            /* Dead */0,
            /* Dead */0,
            /* Alive */1,
            /* Dead */0,
            /* Dead */0,
            /* Dead */0,
            /* Dead */0,
            /* Dead */0,
            /* Dead */0,
            /* Dead */0
          ]
        ];
}

function simulate(world) {
  return $$Array.to_list(world[/* data */2]);
}

var a_world = mk_bar_world(/* () */0);

function render(world) {
  for(var y = 0 ,y_finish = world[/* height */1] - 1 | 0; y <= y_finish; ++y){
    process.stdout.write("|");
    for(var x = 0 ,x_finish = world[/* width */0] - 1 | 0; x <= x_finish; ++x){
      var match = Caml_array.caml_array_get(world[/* data */2], Caml_int32.imul(y, world[/* width */0]) + x | 0);
      if (match) {
        process.stdout.write("X");
      } else {
        process.stdout.write(" ");
      }
    }
    process.stdout.write("|");
    process.stdout.write("\n");
  }
  return /* () */0;
}

render(a_world);

exports.world_cord_to_index = world_cord_to_index;
exports.neighbors = neighbors;
exports.mk_world = mk_world;
exports.mk_bar_world = mk_bar_world;
exports.simulate = simulate;
exports.a_world = a_world;
exports.render = render;
/* a_world Not a pure module */
